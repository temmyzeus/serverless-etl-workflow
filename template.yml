AWSTemplateFormatVersion: "2010-09-09"
Description: Event driven serverless ETL
Transform: AWS::Serverless-2016-10-31

Parameters:
  s3BucketName:
    Description: "Name of S3 Bucket"
    Type: String
    MinLength: 3
    MaxLength: 63
    # AllowedPattern:

  lambdaBucketName:
    Description: "Name of S3 Bucket containing code for Lambda"
    Type: String
    MinLength: 3
    MaxLength: 63
    Default: lambda-code-bucket-event-driven-etl

  queueName:
    Description: "Name of SQS Queue"
    Type: String
    MaxLength: 80

  functionName:
    Description: "Name of the Lambda function"
    Type: String
    MinLength: 5
    Default: Convert-Data-Files

  targetS3BucketPath:
    Description: "Target S3 Bucket path to load data to"
    Type: String
    MinLength: 5

Resources:
  s3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: sqsQueue
    Properties:
      BucketName: !Ref s3BucketName
      NotificationConfiguration:
        QueueConfigurations:
          - Queue: !GetAtt sqsQueue.Arn
            Event: "s3:ObjectCreated:Put"
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw/
                  - Name: suffix
                    Value: .csv
          - Queue: !GetAtt sqsQueue.Arn
            Event: "s3:ObjectCreated:Put"
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw/
                  - Name: suffix
                    Value: .json
          - Queue: !GetAtt sqsQueue.Arn
            Event: "s3:ObjectCreated:Put"
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw/
                  - Name: suffix
                    Value: .xlsx
      Tags:
        - Key: Project
          Value: event-driven-serverless-etl

  lambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref lambdaBucketName
      Tags:
        - Key: Project
          Value: event-driven-serverless-etl

  s3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Statement1
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: s3:*
            Resource: !Sub arn:aws:s3:::${s3BucketName}

  sqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref queueName
      DelaySeconds: 0
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 345600 # 4 days
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 80
      Tags:
        - Key: Project
          Value: event-driven-serverless-etl

  sqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref sqsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: Policy1669743288943
        Statement:
          - Sid: Stmt1669743286484
            Effect: Allow
            Principal: "*"
            Action: sqs:*
            Resource: !Sub arn:aws:sqs:us-west-2:${AWS::AccountId}:${queueName}
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:aws:s3:::${s3BucketName}

  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: "lambda-sqs-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: "lambda-cloudwatch-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join
                  - ""
                  - - "arn:aws:logs:"
                    - !Sub "${AWS::Region}:"
                    - !Sub "${AWS::AccountId}:"
                    - "log-group:/aws/lambda/"
                    - !Ref functionName
                # Resource: !Sub "arn:aws:logs:{AWS::Region}:{AWS::AccountId}:log-group:/aws/lambda/{!Ref lambdaFunction}:*"
        - PolicyName: "lambda-s3-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt s3Bucket.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Join
                  - ""
                  - - !GetAtt s3Bucket.Arn
                    - "/*"

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "This performa some operation on lambda"
      FunctionName: !Ref functionName
      Handler: lambda.lambda_functions.trigger_handler
      Architectures:
        - x86_64
      MemorySize: 3008
      EphemeralStorage:
        Size: 3072
      Runtime: python3.9
      Timeout: 60
      Role: !GetAtt lambdaRole.Arn
      Code:
        S3Bucket: !Ref lambdaCodeBucket
        S3Key: lambda.zip
      Environment:
        Variables:
          TARGET_S3_BUCKET_PATH: !Ref targetS3BucketPath
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:2"
      Tags:
        - Key: Project
          Value: event-driven-serverless-etl

  sqsToLambdaEventSourceMap:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      # Seems it can be used for multiple sources
      BatchSize: 200
      Enabled: true
      EventSourceArn: !GetAtt sqsQueue.Arn
      FunctionName: !Ref lambdaFunction
      MaximumBatchingWindowInSeconds: 300 # 5 minutes
